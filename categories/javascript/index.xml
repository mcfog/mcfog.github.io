<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on McFog＠がんばらない</title>
    <link>http://press.mcfog.wang/categories/javascript/</link>
    <description>Recent content in javascript on McFog＠がんばらない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2020 McFog W. All rights reserved.</copyright>
    <lastBuildDate>Sun, 23 Jun 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://press.mcfog.wang/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>a browser incompatibility behavior about jquery and unattached element</title>
      <link>http://press.mcfog.wang/2013/06/a-browser-incompatibility-behavior-about-jquery-and-unattached-element/</link>
      <pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/06/a-browser-incompatibility-behavior-about-jquery-and-unattached-element/</guid>
      <description>&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;jQuery.fn.hide 会读取元素的display样式&lt;/li&gt;
&lt;li&gt;读取尚未插入dom树的脱机元素的样式时，不同浏览器行为不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;场景&#34;&gt;场景&lt;/h3&gt;
&lt;p&gt;在一段显示错误提示的代码中，发现firefox下显示异常，错误提示tips的宽度没有自适应内容而是占满了整个容器。inspect后发现，本应是由CSS控制的&lt;code&gt;display:inline-block&lt;/code&gt;被元素的&lt;code&gt;style=&amp;quot;display:block&amp;quot;&lt;/code&gt;覆盖，chrome下没有这个问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>inspiring CDUK the modularized and flexible docco</title>
      <link>http://press.mcfog.wang/2013/06/inspiring-cduk-the-modularized-and-flexible-docco/</link>
      <pubDate>Sat, 15 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/06/inspiring-cduk-the-modularized-and-flexible-docco/</guid>
      <description>&lt;p&gt;最近在看Backbone&amp;amp;Underscore的时候，对他们的annoted source（&lt;a href=&#34;http://backbonejs.org/docs/backbone.html&#34;&gt;backbone&lt;/a&gt; / &lt;a href=&#34;http://underscorejs.org/docs/underscore.html&#34;&gt;underscore&lt;/a&gt;）产生了好感，然后发现他们都是用
&lt;a href=&#34;http://jashkenas.github.io/docco/&#34;&gt;&lt;strong&gt;Docco&lt;/strong&gt;&lt;/a&gt; 来做的。&lt;/p&gt;
&lt;p&gt;后来顺藤摸瓜发现除了类似backbone/underscore的将注释按markdown写的做法，还有更加彻底的将代码写进markdown中的做法，coffeescript已经有支持（&lt;a href=&#34;http://ashkenas.com/literate-coffeescript/&#34;&gt;literate-coffeescript&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;挖进源码看docco，我发现他的可扩展性存在问题，用少量代码迅速完成了核心功能但并不易扩展。最近又手痒的厉害于是干脆挖坑自己写一个literal programming用的工具。&lt;/p&gt;
&lt;p&gt;这里记录下最初的目的和一些想法，目前的进度是基于markdown四空格的lexer已经可以跑了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grunt-coco released</title>
      <link>http://press.mcfog.wang/2013/06/grunt-coco-released/</link>
      <pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/06/grunt-coco-released/</guid>
      <description>&lt;p&gt;最近在看各种自动化工具，有集成化程度高，比起编译工具更像“IDE减文本编辑”的&lt;a href=&#34;http://mimosajs.com&#34;&gt;mimosajs&lt;/a&gt;，也有被业界广泛认可，开放易配置的&lt;a href=&#34;http://gruntjs.com&#34;&gt;gruntjs&lt;/a&gt;。作为一个&lt;a href=&#34;https://github.com/satyr/coco&#34;&gt;coco&lt;/a&gt;语言支持者，看自动化工具当然是先看能不能支持coco。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An elegant design to unify async and sync callback based on promise object</title>
      <link>http://press.mcfog.wang/2013/06/an-elegant-design-to-unify-async-and-sync-callback-based-on-promise-object/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/06/an-elegant-design-to-unify-async-and-sync-callback-based-on-promise-object/</guid>
      <description>&lt;p&gt;在JS代码的设计中，“回调”是非常重要而有效的手段，这里讨论的是框架需要获取回调结果的，更加注重IoC的回调。（另一种回调的使用往往更接近订阅者模式，强调信息的单向下发）往往框架代码需要获取某些信息，但如何获取的逻辑需要留待使用者实现，此时回调就是非常直接的选择。&lt;/p&gt;
&lt;p&gt;获取回调的输出信息有最直接的使用返回值（同步），但异步有时是无法避免的。本文不准备讨论设计回调时应该设计成同步返回还是异步返回，而是讨论如何简洁而优雅地兼容两者，使回调既能够直接返回结果，又可以通知框架等待异步返回结果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DSL style javascript design</title>
      <link>http://press.mcfog.wang/2013/06/dsl-style-javascript-design/</link>
      <pubDate>Mon, 03 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/06/dsl-style-javascript-design/</guid>
      <description>&lt;h2 id=&#34;组织大表单应用中javascript代码的一种方法&#34;&gt;组织大表单应用中javascript代码的一种方法&lt;/h2&gt;
&lt;h3 id=&#34;问题动机目的&#34;&gt;问题，动机，目的&lt;/h3&gt;
&lt;p&gt;超过一屏，属性复杂到一定程度的录入界面/系统中，缺乏良好架构的javascript代码往往容易失控。尤其是当规模从小型表单开始逐渐变大时，javascript代码很容易演变成已DOM为核心的、缺乏结构、满是hack且难以维护的状态。&lt;/p&gt;
&lt;p&gt;我认为良好可维护的JS代码应该具有以下的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个文件应该控制在一千行以内&lt;/li&gt;
&lt;li&gt;依赖管理和合并，开发应该单看一个JS文件就知道它依赖别的哪些代码，而不是在HTML中直接列举所有依赖，或者更糟，把所有超过2个页面要用的JS全写一起。&lt;/li&gt;
&lt;li&gt;良好的代码复用，清晰的模块划分&lt;/li&gt;
&lt;li&gt;改变字段的表现形式或逻辑时，不应该需要修改/考虑/知道其他字段的逻辑和展现形式。改变DOM树结构、更换表单控件等改变展现方式的需求不应当对JS产生毁灭性打击。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前三个问题基本可以归结为，超过一千行的或是需要复用的JS代码使用RequireJS / SeaJS 等方案进行分解和管理。由于这是复杂JS工程的共性，这里不多做展开讨论。本文主要关注最后一点，也就是如何解除字段逻辑和展示之间的耦合，如何解除字段和其他字段的耦合。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backbone first glance</title>
      <link>http://press.mcfog.wang/2013/05/backbone-first-glance/</link>
      <pubDate>Sat, 25 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/05/backbone-first-glance/</guid>
      <description>&lt;p&gt;昨夜开始实现&lt;a href=&#34;http://press.mcfog.wang/2013/05/hello/&#34;&gt;利用github api 把文章评论丢到Issue里面&lt;/a&gt;，选型时选择了Backbone作为基础，对比以往研究过的其他各类框架，Backbone是崭新而让我震惊的&lt;/p&gt;
&lt;p&gt;先说结论：Backbone是_framework of MV* frameworks_，是框架的框架；或者说，Backbone仅仅抽象了web app framework中多数都需要的功能组织成api接口，但并没有将自己限制在任何一种风格，而是要求开发者先以Backbone为基础自己定义出一种框架（完成MV*中“*”部分和V部分的定义），然后再实现自己的业务。&lt;/p&gt;
&lt;h3 id=&#34;不是mvc-mvp-mvvm&#34;&gt;不是MVC, MVP, MVVM&lt;/h3&gt;</description>
    </item>
    
  </channel>
</rss>