<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design on McFog＠がんばらない</title>
    <link>http://press.mcfog.wang/tags/design/</link>
    <description>Recent content in design on McFog＠がんばらない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2020 McFog W. All rights reserved.</copyright>
    <lastBuildDate>Sun, 09 Jun 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://press.mcfog.wang/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An elegant design to unify async and sync callback based on promise object</title>
      <link>http://press.mcfog.wang/2013/06/an-elegant-design-to-unify-async-and-sync-callback-based-on-promise-object/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/06/an-elegant-design-to-unify-async-and-sync-callback-based-on-promise-object/</guid>
      <description>&lt;p&gt;在JS代码的设计中，“回调”是非常重要而有效的手段，这里讨论的是框架需要获取回调结果的，更加注重IoC的回调。（另一种回调的使用往往更接近订阅者模式，强调信息的单向下发）往往框架代码需要获取某些信息，但如何获取的逻辑需要留待使用者实现，此时回调就是非常直接的选择。&lt;/p&gt;
&lt;p&gt;获取回调的输出信息有最直接的使用返回值（同步），但异步有时是无法避免的。本文不准备讨论设计回调时应该设计成同步返回还是异步返回，而是讨论如何简洁而优雅地兼容两者，使回调既能够直接返回结果，又可以通知框架等待异步返回结果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DSL style javascript design</title>
      <link>http://press.mcfog.wang/2013/06/dsl-style-javascript-design/</link>
      <pubDate>Mon, 03 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://press.mcfog.wang/2013/06/dsl-style-javascript-design/</guid>
      <description>&lt;h2 id=&#34;组织大表单应用中javascript代码的一种方法&#34;&gt;组织大表单应用中javascript代码的一种方法&lt;/h2&gt;
&lt;h3 id=&#34;问题动机目的&#34;&gt;问题，动机，目的&lt;/h3&gt;
&lt;p&gt;超过一屏，属性复杂到一定程度的录入界面/系统中，缺乏良好架构的javascript代码往往容易失控。尤其是当规模从小型表单开始逐渐变大时，javascript代码很容易演变成已DOM为核心的、缺乏结构、满是hack且难以维护的状态。&lt;/p&gt;
&lt;p&gt;我认为良好可维护的JS代码应该具有以下的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个文件应该控制在一千行以内&lt;/li&gt;
&lt;li&gt;依赖管理和合并，开发应该单看一个JS文件就知道它依赖别的哪些代码，而不是在HTML中直接列举所有依赖，或者更糟，把所有超过2个页面要用的JS全写一起。&lt;/li&gt;
&lt;li&gt;良好的代码复用，清晰的模块划分&lt;/li&gt;
&lt;li&gt;改变字段的表现形式或逻辑时，不应该需要修改/考虑/知道其他字段的逻辑和展现形式。改变DOM树结构、更换表单控件等改变展现方式的需求不应当对JS产生毁灭性打击。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前三个问题基本可以归结为，超过一千行的或是需要复用的JS代码使用RequireJS / SeaJS 等方案进行分解和管理。由于这是复杂JS工程的共性，这里不多做展开讨论。本文主要关注最后一点，也就是如何解除字段逻辑和展示之间的耦合，如何解除字段和其他字段的耦合。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>